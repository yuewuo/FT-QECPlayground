{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?4241","webpack:///./src/App.vue?94ca","webpack:///./src/components/FaultTolerantView.vue?b2c1","webpack:///src/components/FaultTolerantView.vue","webpack:///./src/components/FaultTolerantView.vue?caba","webpack:///./src/components/FaultTolerantView.vue?b6ed","webpack:///src/App.vue","webpack:///./src/App.vue?1160","webpack:///./src/App.vue?bff9","webpack:///./src/plugins/element.js","webpack:///./src/plugins/mathjax-config.js","webpack:///./src/main.js","webpack:///./src/components/FaultTolerantView.vue?2908","webpack:///./src/assets/logo.png"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_vm","this","_h","$createElement","_c","_self","attrs","ref","staticClass","L","T","show_data_qubit","show_X_ancilla","show_Z_ancilla","show_vertical_line","show_initialization","show_CX_gates","show_X_edges","show_Z_edges","use_rotated","use_perspective_camera","enableStats","websiteRoot","_m","slot","_v","staticStyle","model","callback","$$v","bufferedL","expression","error_rate_x","error_rate_z","error_rate_y","on","generate_random_error","clear_error","_l","item","index","style","color","_s","error_info","_e","target_t","target_i","target_j","current_error","$event","set_error","staticRenderFns","readonly","target","keys","relavents","k","node","n_type","transparent","opacity","console","assert","edges","component","Vue","use","Element","locale","isMathjaxConfig","initMathjaxConfig","MathJax","Hub","Config","showProcessingMessages","messageStyle","jax","tex2jax","inlineMath","displayMath","skipTags","availableFonts","showMathMenu","MathQueue","elementId","Queue","document","getElementById","config","productionTip","ElementUI","MathjaxConfig","render","h","App","$mount"],"mappings":"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","file":"js/app.48620d12.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/FT-QECPlayground/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('FaultTolerantView',{ref:\"ft_view\",staticClass:\"main-qubits\",attrs:{\"panelWidth\":480,\"L\":_vm.L,\"T\":_vm.T,\"showDataQubit\":_vm.show_data_qubit,\"showXAncilla\":_vm.show_X_ancilla,\"showZAncilla\":_vm.show_Z_ancilla,\"showVerticalLine\":_vm.show_vertical_line,\"showInitialization\":_vm.show_initialization,\"showCXGates\":_vm.show_CX_gates,\"showXEdges\":_vm.show_X_edges,\"showZEdges\":_vm.show_Z_edges,\"useRotated\":_vm.use_rotated,\"depolarErrorRate\":0.001,\"usePerspectiveCamera\":_vm.use_perspective_camera,\"enableStats\":_vm.enableStats,\"websiteRoot\":_vm.websiteRoot}}),_c('div',{staticClass:\"control-panel no-scrollbar\"},[_vm._m(0),_c('el-card',[_c('div',{staticClass:\"clearfix\",attrs:{\"slot\":\"header\"},slot:\"header\"},[_c('span',[_vm._v(\"Display Settings\")])]),_c('div',{staticStyle:{\"position\":\"relative\"}},[_c('div',[_vm._v(\"\\n\\t\\t\\t\\t\\tCode Distance:\\n\\t\\t\\t\\t\\t\"),_c('el-input-number',{attrs:{\"min\":3},model:{value:(_vm.bufferedL),callback:function ($$v) {_vm.bufferedL=$$v},expression:\"bufferedL\"}})],1),_c('div',{staticStyle:{\"height\":\"20px\"}}),_c('div',[_vm._v(\"\\n\\t\\t\\t\\t\\tMeasurement Round:\\n\\t\\t\\t\\t\\t\"),_c('el-input-number',{attrs:{\"min\":1},model:{value:(_vm.T),callback:function ($$v) {_vm.T=$$v},expression:\"T\"}})],1),_c('div',{staticStyle:{\"height\":\"20px\"}}),_c('el-switch',{attrs:{\"active-text\":\"Rotated Planar Code\",\"inactive-text\":\"Standard Planar Code\"},model:{value:(_vm.use_rotated),callback:function ($$v) {_vm.use_rotated=$$v},expression:\"use_rotated\"}}),_c('div',{staticStyle:{\"height\":\"20px\"}}),_c('el-switch',{attrs:{\"active-text\":\"Perspective Camera\",\"inactive-text\":\"Orthogonal Camera\"},model:{value:(_vm.use_perspective_camera),callback:function ($$v) {_vm.use_perspective_camera=$$v},expression:\"use_perspective_camera\"}}),_c('div',{staticStyle:{\"height\":\"20px\"}}),_c('el-switch',{attrs:{\"active-text\":\"Show Data Qubits\",\"inactive-text\":\"Hide\"},model:{value:(_vm.show_data_qubit),callback:function ($$v) {_vm.show_data_qubit=$$v},expression:\"show_data_qubit\"}}),_c('div',{staticStyle:{\"height\":\"20px\"}}),_c('el-switch',{attrs:{\"active-text\":\"Show Z Stabilizers\",\"inactive-text\":\"Hide\"},model:{value:(_vm.show_Z_ancilla),callback:function ($$v) {_vm.show_Z_ancilla=$$v},expression:\"show_Z_ancilla\"}}),_c('div',{staticStyle:{\"height\":\"20px\"}}),_c('el-switch',{attrs:{\"active-text\":\"Show X Stabilizers\",\"inactive-text\":\"Hide\"},model:{value:(_vm.show_X_ancilla),callback:function ($$v) {_vm.show_X_ancilla=$$v},expression:\"show_X_ancilla\"}}),_c('div',{staticStyle:{\"height\":\"20px\"}}),_c('el-switch',{attrs:{\"active-text\":\"Show Vertical Lines\",\"inactive-text\":\"Hide\"},model:{value:(_vm.show_vertical_line),callback:function ($$v) {_vm.show_vertical_line=$$v},expression:\"show_vertical_line\"}}),_c('div',{staticStyle:{\"height\":\"20px\"}}),_c('el-switch',{attrs:{\"active-text\":\"Show Initialization\",\"inactive-text\":\"Hide\"},model:{value:(_vm.show_initialization),callback:function ($$v) {_vm.show_initialization=$$v},expression:\"show_initialization\"}}),_c('div',{staticStyle:{\"height\":\"20px\"}}),_c('el-switch',{attrs:{\"active-text\":\"Show CX (CNOT) Gates\",\"inactive-text\":\"Hide\"},model:{value:(_vm.show_CX_gates),callback:function ($$v) {_vm.show_CX_gates=$$v},expression:\"show_CX_gates\"}}),_c('div',{staticStyle:{\"height\":\"20px\"}}),_c('el-switch',{attrs:{\"active-text\":\"Show Z Graph Lattice\",\"inactive-text\":\"Hide\"},model:{value:(_vm.show_Z_edges),callback:function ($$v) {_vm.show_Z_edges=$$v},expression:\"show_Z_edges\"}}),_c('div',{staticStyle:{\"height\":\"20px\"}}),_c('el-switch',{attrs:{\"active-text\":\"Show X Graph Lattice\",\"inactive-text\":\"Hide\"},model:{value:(_vm.show_X_edges),callback:function ($$v) {_vm.show_X_edges=$$v},expression:\"show_X_edges\"}})],1)]),_c('div',{staticStyle:{\"height\":\"10px\"}}),_c('el-card',[_c('div',{staticClass:\"clearfix\",attrs:{\"slot\":\"header\"},slot:\"header\"},[_c('span',[_vm._v(\"Random Error Generator (I + p\"),_c('sub',[_vm._v(\"X\")]),_vm._v(\"X + p\"),_c('sub',[_vm._v(\"Z\")]),_vm._v(\"Z + p\"),_c('sub',[_vm._v(\"Y\")]),_vm._v(\"Y)\")])]),_c('div',{staticStyle:{\"position\":\"relative\"}},[_c('div',[_c('div',{staticClass:\"probability\"},[_vm._v(\"p\"),_c('sub',[_vm._v(\"X\")])]),_c('el-input',{staticStyle:{\"width\":\"90px\"},attrs:{\"placeholder\":\"0\"},model:{value:(_vm.error_rate_x),callback:function ($$v) {_vm.error_rate_x=$$v},expression:\"error_rate_x\"}}),_c('div',{staticClass:\"probability\"},[_vm._v(\"p\"),_c('sub',[_vm._v(\"Z\")])]),_c('el-input',{staticStyle:{\"width\":\"90px\"},attrs:{\"placeholder\":\"0\"},model:{value:(_vm.error_rate_z),callback:function ($$v) {_vm.error_rate_z=$$v},expression:\"error_rate_z\"}}),_c('div',{staticClass:\"probability\"},[_vm._v(\"p\"),_c('sub',[_vm._v(\"Y\")])]),_c('el-input',{staticStyle:{\"width\":\"90px\"},attrs:{\"placeholder\":\"0\"},model:{value:(_vm.error_rate_y),callback:function ($$v) {_vm.error_rate_y=$$v},expression:\"error_rate_y\"}})],1),_c('div',{staticStyle:{\"height\":\"20px\"}}),_c('el-button',{staticStyle:{\"width\":\"100%\"},attrs:{\"type\":\"success\"},on:{\"click\":_vm.generate_random_error}},[_vm._v(\"Generate i.i.d. Random Errors\")])],1)]),_c('div',{staticStyle:{\"height\":\"10px\"}}),_c('el-card',[_c('div',{staticClass:\"clearfix\",attrs:{\"slot\":\"header\"},slot:\"header\"},[_c('span',[_vm._v(\"Customize Error\")])]),_c('div',{staticStyle:{\"position\":\"relative\"}},[_c('el-button',{staticStyle:{\"width\":\"100%\"},attrs:{\"type\":\"warning\"},on:{\"click\":_vm.clear_error}},[_vm._v(\"Clear All Errors\")]),_c('div',{staticStyle:{\"height\":\"20px\"}}),_c('div',_vm._l((_vm.error_info),function(item,index){return _c('div',{key:index,style:({ color: item[4] })},[_vm._v(\"\\n\\t\\t\\t\\t\\t\\t\"+_vm._s(((item[3]) + \" error at t=\" + (item[0]) + \", i=\" + (item[1]) + \", j=\" + (item[2])))+\"\\n\\t\\t\\t\\t\\t\")])}),0),(_vm.error_info.length > 0)?_c('div',{staticStyle:{\"height\":\"20px\"}}):_vm._e(),_c('div',[_c('div',{staticClass:\"index\"},[_vm._v(\"t\")]),_c('el-input-number',{attrs:{\"controls-position\":\"right\",\"min\":0,\"max\":6 * _vm.T,\"size\":\"medium\"},model:{value:(_vm.target_t),callback:function ($$v) {_vm.target_t=$$v},expression:\"target_t\"}}),_c('div',{staticClass:\"index\"},[_vm._v(\"i\")]),_c('el-input-number',{attrs:{\"controls-position\":\"right\",\"min\":0,\"max\":2 * _vm.L - 2,\"size\":\"medium\"},model:{value:(_vm.target_i),callback:function ($$v) {_vm.target_i=$$v},expression:\"target_i\"}}),_c('div',{staticClass:\"index\"},[_vm._v(\"j\")]),_c('el-input-number',{attrs:{\"controls-position\":\"right\",\"min\":0,\"max\":2 * _vm.L - 2,\"size\":\"medium\"},model:{value:(_vm.target_j),callback:function ($$v) {_vm.target_j=$$v},expression:\"target_j\"}})],1),_c('div',{staticStyle:{\"height\":\"20px\"}}),_c('div',[_c('el-button',{staticClass:\"set-error-button\",attrs:{\"type\":\"info\",\"plain\":_vm.current_error != 0},on:{\"click\":function($event){return _vm.set_error(false, false)}}},[_vm._v(\"I\")]),_c('el-button',{staticClass:\"set-error-button\",attrs:{\"type\":\"success\",\"plain\":_vm.current_error != 1},on:{\"click\":function($event){return _vm.set_error(true, false)}}},[_vm._v(\"X\")]),_c('el-button',{staticClass:\"set-error-button\",attrs:{\"type\":\"primary\",\"plain\":_vm.current_error != 2},on:{\"click\":function($event){return _vm.set_error(false, true)}}},[_vm._v(\"Z\")]),_c('el-button',{staticClass:\"set-error-button\",attrs:{\"type\":\"danger\",\"plain\":_vm.current_error != 3},on:{\"click\":function($event){return _vm.set_error(true, true)}}},[_vm._v(\"Y\")])],1)],1)])],1)],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"text-align\":\"center\"}},[_c('h1',{staticClass:\"title\"},[_c('img',{staticClass:\"logo\",attrs:{\"src\":require(\"@/assets/logo.png\")}}),_vm._v(\"QEC Playground\")]),_c('p',[_vm._v(\"This page is a visualization tool of fault-tolerant surface code. For tutorial and simpler case, visit \"),_c('a',{attrs:{\"href\":\"https://wuyue98.cn/QECPlayground/\",\"target\":\"_blank\"}},[_vm._v(\"QECPlayground\")]),_vm._v(\" instead.\")])])}]\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"main\",attrs:{\"id\":\"fault_tolerant_view_container\"}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"main\" id=\"fault_tolerant_view_container\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from 'three'\r\nimport Stats from 'three/examples/jsm/libs/stats.module.js'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\r\n\r\n// use this function to restriction modification to constants\r\nfunction readonly(target, keys) {\r\n    var _cloned = {}\r\n    function makeReadOnlyProperty(cloned, obj, prop) {\r\n        Object.defineProperty(cloned, prop, {\r\n            set: function() {\r\n                throw {\r\n                    name: 'UnableRewriteException',\r\n                    message: 'original cannot be rewrite'\r\n                }\r\n            },\r\n            get: function() {\r\n                return obj[prop]\r\n            },\r\n            enumerable: true\r\n        })\r\n    }\r\n    for (var prop in target) {\r\n        makeReadOnlyProperty(_cloned, target, prop)\r\n    }\r\n    return _cloned\r\n}\r\n\r\nexport default {\r\n\tname: 'FaultTolerantView',\r\n\tprops: {\r\n        websiteRoot: {\r\n            type: String,\r\n            default: '',  \r\n        },\r\n\t\tL: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 3,\r\n\t\t},\r\n\t\tT: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 3,\r\n        },\r\n        useRotated: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        showDataQubit: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n        showXAncilla: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n        showZAncilla: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n        showVerticalLine: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n        showInitialization: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n        showCXGates: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n        showXEdges: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n        showZEdges: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n\t\tusePerspectiveCamera: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true\r\n\t\t},\r\n\t\t\r\n\t\tpanelWidth: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 480\r\n        },\r\n        errorModel: {\r\n            type: String,\r\n            default: \"depolarizing\",\r\n        },\r\n        depolarErrorRate: {  // used when errorModel = \"depolarizing\", (1-3p) + pX + pZ + pY, px = 2p, pz = 2p\r\n            type: Number,\r\n            default: 0.001,  // also used as normalization in computing weight\r\n        },\r\n\t\tdataQubitColor: {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: () => new THREE.Color( 1, 0.65, 0 )\r\n        },\r\n        enableStats: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n        enableBackground: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n\t},\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tthree: { },  // save necessary THREE.js objects\r\n\t\t\tinternals: { bias: { x:0, y:0, z:0 } },  // internal data\r\n\r\n            // controllable parameters for visualization\r\n            snapshot: null,  // [t][i][j]\r\n            constants: null, // { QTYPE (qubit type), NTYPE (node type), etc. }\r\n            show_data_qubit: false,\r\n            show_X_ancilla: false,\r\n            show_Z_ancilla: false,\r\n            show_vertical_line: false,\r\n            show_initialization: false,\r\n            show_CX_gates: false,\r\n            show_X_edges: false,\r\n            show_Z_edges: false,\r\n\t\t}\r\n\t},\r\n\tmounted() {\r\n        this.build_constants()\r\n        window.THREE = THREE\r\n        window.$ftview = this  // for fast debugging\r\n        \r\n        // copy config\r\n        this.show_data_qubit = this.showDataQubit\r\n        this.show_X_ancilla = this.showXAncilla\r\n        this.show_Z_ancilla = this.showZAncilla\r\n        this.show_vertical_line = this.showVerticalLine\r\n        this.show_initialization = this.showInitialization\r\n        this.show_CX_gates = this.showCXGates\r\n        this.show_X_edges = this.showXEdges\r\n        this.show_Z_edges = this.showZEdges\r\n\r\n\t\tconst scene = new THREE.Scene()\r\n\t\tthis.three.scene = scene\r\n\t\tthis.three.clock = new THREE.Clock()\r\n\t\tthis.three.clockAbs = new THREE.Clock()\r\n\r\n\t\t// add camera and renderer\r\n\t\tconst windowWidth = window.innerWidth - this.panelWidth\r\n        const windowHeight = window.innerHeight\r\n        this.three.perspectiveCamera = new THREE.PerspectiveCamera( 75, windowWidth / window.innerHeight, 0.1, 10000 )\r\n        this.three.orthogonalCamera = new THREE.OrthographicCamera( windowWidth / windowHeight * -3, windowWidth / windowHeight * 3, 3, -3, 0.1, 10000 )\r\n        this.update_camera()\r\n        if (this.usePerspectiveCamera) {\r\n            this.three.camera = this.three.perspectiveCamera\r\n        } else {\r\n            this.three.camera = this.three.orthogonalCamera\r\n        }\r\n\t\tconst renderer = new THREE.WebGLRenderer({ antialias: true })\r\n\t\tthis.three.renderer = renderer\r\n\t\trenderer.setPixelRatio( window.devicePixelRatio )\r\n\t\trenderer.setSize( windowWidth, windowHeight )\r\n        let container = document.getElementById('fault_tolerant_view_container')\r\n        this.three.orbitControlPerspective = new OrbitControls( this.three.perspectiveCamera, renderer.domElement )\r\n        this.three.orbitControlOrthogonal = new OrbitControls( this.three.orthogonalCamera, renderer.domElement )\r\n        this.three.orbitControl = this.three.orbitControlPerspective\r\n\t\tcontainer.appendChild(renderer.domElement)\r\n\r\n\t\t// support for resize\r\n\t\twindow.addEventListener( 'resize', (() => {\r\n\t\t\tconst windowWidth = window.innerWidth - this.panelWidth\r\n\t\t\tconst windowHeight = window.innerHeight\r\n\t\t\tthis.three.orthogonalCamera.aspect = windowWidth / windowHeight\r\n\t\t\tthis.three.orthogonalCamera.updateProjectionMatrix()\r\n\t\t\tthis.three.perspectiveCamera.aspect = windowWidth / windowHeight\r\n\t\t\tthis.three.perspectiveCamera.updateProjectionMatrix()\r\n\t\t\trenderer.setSize( windowWidth, windowHeight )\r\n\t\t}).bind(this), false )\r\n\r\n\t\t// add background\r\n        this.three.pure_background = new THREE.Color(0xFFFFFF)\r\n        const loader = new THREE.CubeTextureLoader();\r\n        const texture = loader.load([\r\n            this.websiteRoot + '/px.jpg', this.websiteRoot + '/nx.jpg', this.websiteRoot + '/py.jpg'\r\n            , this.websiteRoot + '/ny.jpg', this.websiteRoot + '/pz.jpg', this.websiteRoot + '/nz.jpg',\r\n        ])\r\n        this.three.texture_background = texture\r\n\t\tif (this.enableBackground) {\r\n\t\t\tscene.background = this.three.texture_background\r\n\t\t} else {\r\n            scene.background = this.three.pure_background\r\n        }\r\n\r\n\t\t// add stats if enabled\r\n\t\tif (this.enableStats) {\r\n\t\t\tthis.three.stats = new Stats()\r\n\t\t\tcontainer.appendChild( this.three.stats.dom )\r\n        }\r\n        \r\n        this.create_static_resources()\r\n        if (this.useRotated) {\r\n            this.swap_snapshot(this.build_rotated_planar_code())\r\n        } else this.swap_snapshot(this.build_standard_planar_code_snapshot())\r\n\r\n\t\t// start rendering\r\n        this.animate()\r\n        \r\n        this.test()\r\n\r\n\t},\r\n\tmethods: {\r\n\t\tasync test() {\r\n            // this.paper_figure_Z_stabilizer_connection()\r\n        },\r\n        show_nothing() {\r\n            this.show_data_qubit = false\r\n            this.show_X_ancilla = false\r\n            this.show_Z_ancilla = false\r\n            this.show_vertical_line = false\r\n            this.show_initialization = false\r\n            this.show_CX_gates = false\r\n            this.show_X_edges = false\r\n            this.show_Z_edges = false\r\n        },\r\n        async paper_figure_12_neighbors(neighbor_idx) {\r\n            let source = [12, 2, 3]\r\n            let [target, single_error, cost, case_count, relavents] = [  // automatically generated by `test.rs` => find one example for each 12 boundaries\r\n                [[12, 2, 1], [4, 2, 2], 0.0013983211195521077, 14, [[2, 1], [2, 2], [2, 3]]],  // left\r\n                [[12, 2, 5], [4, 2, 4], 0.0013983211195521077, 14, [[2, 3], [2, 4], [2, 5]]],  // right\r\n                [[12, 0, 3], [5, 1, 3], 0.0005997600320000002, 6, [[0, 3], [1, 3], [2, 3]]],  // front\r\n                [[12, 4, 3], [5, 3, 3], 0.0005997600320000002, 6, [[2, 3], [3, 3], [4, 3]]],  // back\r\n                [[6, 2, 3], [2, 2, 3], 0.0007995201279871998, 8, [[2, 3]]],  // bottom\r\n                [[18, 2, 3], [8, 2, 3], 0.0007995201279871998, 8, [[2, 3]]],  // top\r\n                [[6, 0, 3], [2, 1, 3], 0.0005997600320000002, 6, [[0, 3], [1, 3], [2, 3]]],  // bottom front\r\n                [[6, 2, 1], [3, 2, 2], 0.00019999999999999985, 2, [[2, 1], [2, 2], [2, 3]]],  // bottom left\r\n                [[6, 0, 5], [3, 1, 4], 0.00019999999999999985, 2, [[0, 5], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5]]],  // bottom front right\r\n                [[18, 4, 3], [8, 3, 3], 0.0005997600320000002, 6, [[2, 3], [3, 3], [4, 3]]],  // top back\r\n                [[18, 2, 5], [9, 2, 4], 0.00019999999999999985, 2, [[2, 3], [2, 4], [2, 5]]],  // top right\r\n                [[18, 4, 1], [9, 3, 2], 0.00019999999999999985, 2, [[2, 3], [3, 2], [3, 3], [4, 1], [4, 2], [4, 3]]],  // top back left\r\n            ][neighbor_idx || 0]\r\n            console.log(single_error)\r\n            this.clear_errors()\r\n            this.snapshot[single_error[0]][single_error[1]][single_error[2]].error = this.constants.ETYPE.X\r\n            this.compute_propagated_error()\r\n            this.show_nothing()\r\n            await this.vue_next_tick()  // so that everything is updated\r\n            this.show_Z_ancilla = true\r\n            this.show_X_ancilla = true\r\n            this.show_CX_gates = true\r\n            this.show_vertical_line = true\r\n            this.show_data_qubit = true\r\n            this.show_initialization = true\r\n            await this.vue_next_tick()  // so that everything is updated\r\n            // hide irrelavent qubits\r\n            this.iterate_snapshot((node, t, i, j) => {\r\n                // test if it's relavent\r\n                let irrelavent_but_connects_to_relavent = false\r\n                for (let k = 0; k < relavents.length; ++k) {\r\n                    if (i == relavents[k][0] && j == relavents[k][1]) {  // relavent\r\n                        return\r\n                    }\r\n                    if (node.n_type == this.constants.NTYPE.TARGET || node.n_type == this.constants.NTYPE.CONTROL) {\r\n                        if (node.connection.i == relavents[k][0] && node.connection.j == relavents[k][1]) {\r\n                            irrelavent_but_connects_to_relavent = true\r\n                        }\r\n                    }\r\n                }\r\n                // irrelavent\r\n                if (node.vertical) node.vertical.visible = false\r\n                if (irrelavent_but_connects_to_relavent) {\r\n                    this.visible_mesh(node, false)\r\n                } else {\r\n                    this.visible_mesh(node, false)\r\n                }\r\n            })\r\n            // adjust proper view\r\n            this.use_orthogonal_camera()\r\n            this.three.orbitControl.target = this.snapshot[source[0]][source[1]][source[2]].mesh.position\r\n            this.three.camera.position.set( 4.1205033934935, 4.759126499802873, 5.622697387749099 )  // manually found a good view angle\r\n            // add plane to indicate 3D relations\r\n            if (!this.three.helper_plane) {\r\n                const geometry = new THREE.PlaneGeometry( 4, 4, 32 )\r\n                const material = new THREE.MeshBasicMaterial( {\r\n                    color: 0xffff00, side: THREE.DoubleSide,\r\n                    transparent: true,  // allow opacity,\r\n                    opacity: 0.3,\r\n                } )\r\n                this.three.helper_plane = new THREE.Mesh( geometry, material )\r\n                this.three.helper_plane.rotateX(Math.PI / 2)\r\n                let plane_center = this.position(12, 2, 3)\r\n                this.three.helper_plane.position.set(plane_center[0], plane_center[1], plane_center[2])\r\n                this.three.scene.add( this.three.helper_plane )\r\n                this.three.scene.translateY(1)  // move the whole scene so that capturing figure is easier\r\n            }\r\n        },\r\n        async paper_figure_Z_stabilizer_connection() {\r\n            this.show_nothing()\r\n            await this.vue_next_tick()  // so that everything is updated\r\n            this.show_Z_ancilla = true\r\n            this.show_Z_edges = true\r\n            this.three.scene.background = this.three.pure_background\r\n        },\r\n        async paper_figure_single_error_two_syndrome() {\r\n            this.show_X_edges = false\r\n            this.show_Z_edges = false\r\n            this.snapshot[3][1][2].error = this.constants.ETYPE.X\r\n            this.compute_propagated_error()\r\n        },\r\n\t\tasync sleep_ms(ms) {\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\tsetTimeout(() => { resolve() }, ms)\r\n\t\t\t})\r\n\t\t},\r\n\t\tasync vue_next_tick() {\r\n\t\t\tawait new Promise(((resolve, reject) => {\r\n\t\t\t\tthis.$nextTick(() => { resolve() })\r\n\t\t\t}).bind(this))\r\n        },\r\n        visible_mesh(node, show) {\r\n            if (!node.mesh) return\r\n            if (node.mesh instanceof Array) {\r\n                for (let mesh of node.mesh) mesh.visible = show\r\n            } else {\r\n                node.mesh.visible = show\r\n            }\r\n        },\r\n        use_pure_background(pure_background = true) {\r\n            this.three.scene.background = pure_background ? this.three.pure_background : this.three.texture_background\r\n        },\r\n        use_orthogonal_camera(orthogonal = true) {\r\n            if (orthogonal) {\r\n                this.use_pure_background(true)\r\n                this.three.camera = this.three.orthogonalCamera\r\n                this.three.orbitControl = this.three.orbitControlOrthogonal\r\n            } else {\r\n                this.use_pure_background(false)\r\n                this.three.camera = this.three.perspectiveCamera\r\n                this.three.orbitControl = this.three.orbitControlPerspective\r\n            }\r\n        },\r\n        build_constants() {\r\n            this.constants = readonly({\r\n                QTYPE: readonly({  // qubit type\r\n                    DATA: 0,\r\n                    X: 1,\r\n                    Z: 2,\r\n                }),\r\n                NTYPE: readonly({  // node type, correspond to the nodes in time sequence fiure with detailed gate operations\r\n                    INITIALIZATION: 0,\r\n                    CONTROL: 1,\r\n                    TARGET: 2,\r\n                    MEASUREMENT: 3,\r\n                    NONE: 4,\r\n                    NONE_WITH_DATA_QUBIT: 5,  // for purpose of plotting data qubits\r\n                }),\r\n                ETYPE: readonly({  // node type, correspond to the nodes in time sequence fiure with detailed gate operations\r\n                    I: 0,  // no error\r\n                    X: 1,  // Pauli X error\r\n                    Z: 2,  // Pauli Z error\r\n                    Y: 3,  // both Pauli X and Z error\r\n                }),\r\n                VERTICAL_INTERVAL: 0.333,\r\n            })\r\n        },\r\n\t\tanimate() {\r\n\t\t\trequestAnimationFrame( this.animate )  // call first\r\n\t\t\tconst delta = this.three.clock.getDelta()\r\n\t\t\tconst absTime = this.three.clockAbs.getElapsedTime()\r\n            if (this.three.stats) this.three.stats.update()  // update stats if exists\r\n            this.three.orbitControl.update()\r\n\t\t\tthis.three.renderer.render( this.three.scene, this.three.camera )\r\n        },\r\n        reset_snapshot() {\r\n            // implement resource destroy if structure are meant to be changed dynamically\r\n            if (this.snapshot) {\r\n                this.iterate_snapshot(((node, t, i, j) => {\r\n                    if (node.mesh instanceof Array) {\r\n                        for (let mesh of node.mesh) {\r\n                            this.three.scene.remove(mesh)\r\n                            mesh.material.dispose()\r\n                        }\r\n                    } else if (node.mesh) {\r\n                        this.three.scene.remove(node.mesh)\r\n                        node.mesh.material.dispose()\r\n                    }\r\n                    if (node.vertical) {\r\n                        this.three.scene.remove(node.vertical)\r\n                        node.vertical.material.dispose()\r\n                    }\r\n                    if (node.edges) {\r\n                        for (let edge of node.edges) {\r\n                            this.three.scene.remove(edge.mesh)\r\n                            edge.mesh.material.dispose()\r\n                        }\r\n                    }\r\n                    if (node.boundary && node.boundary.mesh) {\r\n                        this.three.scene.remove(node.boundary.mesh)\r\n                        node.boundary.mesh.material.dispose()\r\n                    }\r\n                }).bind(this))\r\n            }\r\n            this.snapshot = null\r\n        },\r\n        swap_snapshot(snapshot) {\r\n            this.reset_snapshot()\r\n            this.snapshot = snapshot\r\n            this.build_graph_given_error_rate()\r\n            this.establish_snapshot()\r\n        },\r\n        build_code_in_standard_planar_code(filter=((i,j)=>true)) {  // filter determines whether there is a qubit at [t][i][j]\r\n            console.assert(this.T >= 1, \"T should be at least 1, 1 is for perfect measurement condition\")\r\n            const width = 2 * this.L - 1\r\n            const height = this.T * 6 + 1\r\n            let snapshot = []\r\n            for (let t=0; t<height; ++t) {\r\n                let snapshot_row_0 = []\r\n                for (let i=0; i<width; ++i) {\r\n                    let snapshot_row_1 = []\r\n                    for (let j=0; j<width; ++j) {\r\n                        if (filter(i,j)) {  // if here exists a qubit (either data qubit or ancilla qubit)\r\n                            const stage = (t+6-1) % 6  // 0: preparation, 1,2,3,4: CNOT gate, 5: measurement\r\n                            const is_data_qubit = (i+j)%2 == 0 \r\n                            const q_type = is_data_qubit ? this.constants.QTYPE.DATA : (i % 2 == 0 ? this.constants.QTYPE.Z : this.constants.QTYPE.X)\r\n                            let n_type = -1\r\n                            let connection = null  // { t, i, j, }\r\n                            switch (stage) {\r\n                                case 0:\r\n                                    n_type = is_data_qubit ? this.constants.NTYPE.NONE : this.constants.NTYPE.INITIALIZATION\r\n                                    break\r\n                                case 1:\r\n                                    if (is_data_qubit) {\r\n                                        if (i+1 < width && filter(i+1, j)) {\r\n                                            if (j % 2 == 0) n_type = this.constants.NTYPE.TARGET\r\n                                            else n_type = this.constants.NTYPE.CONTROL\r\n                                            connection = { i:i+1, j, t }\r\n                                        } else n_type = this.constants.NTYPE.NONE  // boundary\r\n                                    } else {\r\n                                        if (i-1 >= 0 && filter(i-1, j)) {\r\n                                            if (j % 2 == 0) n_type = this.constants.NTYPE.CONTROL\r\n                                            else n_type = this.constants.NTYPE.TARGET\r\n                                            connection = { i:i-1, j, t }\r\n                                        } else n_type = this.constants.NTYPE.NONE  // boundary\r\n                                    }\r\n                                    break\r\n                                case 2:\r\n                                    if (is_data_qubit) {\r\n                                        if (j+1 < width && filter(i, j+1)) {\r\n                                            if (i % 2 == 0) n_type = this.constants.NTYPE.CONTROL\r\n                                            else n_type = this.constants.NTYPE.TARGET\r\n                                            connection = { i, j:j+1, t }\r\n                                        } else n_type = this.constants.NTYPE.NONE  // boundary\r\n                                    } else {\r\n                                        if (j-1 >= 0 && filter(i, j-1)) {\r\n                                            if (i % 2 == 0) n_type = this.constants.NTYPE.TARGET\r\n                                            else n_type = this.constants.NTYPE.CONTROL\r\n                                            connection = { i, j:j-1, t }\r\n                                        } else n_type = this.constants.NTYPE.NONE  // boundary\r\n                                    }\r\n                                    break\r\n                                case 3:\r\n                                    if (is_data_qubit) {\r\n                                        if (j-1 >= 0 && filter(i, j-1)) {\r\n                                            if (i % 2 == 0) n_type = this.constants.NTYPE.CONTROL\r\n                                            else n_type = this.constants.NTYPE.TARGET\r\n                                            connection = { i, j:j-1, t }\r\n                                        } else n_type = this.constants.NTYPE.NONE  // boundary\r\n                                    } else {\r\n                                        if (j+1 < width && filter(i, j+1)) {\r\n                                            if (i % 2 == 0) n_type = this.constants.NTYPE.TARGET\r\n                                            else n_type = this.constants.NTYPE.CONTROL\r\n                                            connection = { i, j:j+1, t }\r\n                                        } else n_type = this.constants.NTYPE.NONE  // boundary\r\n                                    }\r\n                                    break\r\n                                case 4:\r\n                                    if (is_data_qubit) {\r\n                                        if (i-1 >= 0 && filter(i-1, j)) {\r\n                                            if (j % 2 == 0) n_type = this.constants.NTYPE.TARGET\r\n                                            else n_type = this.constants.NTYPE.CONTROL\r\n                                            connection = { i:i-1, j, t }\r\n                                        } else n_type = this.constants.NTYPE.NONE  // boundary\r\n                                    } else {\r\n                                        if (i+1 < width && filter(i+1, j)) {\r\n                                            if (j % 2 == 0) n_type = this.constants.NTYPE.CONTROL\r\n                                            else n_type = this.constants.NTYPE.TARGET\r\n                                            connection = { i:i+1, j, t }\r\n                                        } else n_type = this.constants.NTYPE.NONE  // boundary\r\n                                    }\r\n                                    break\r\n                                case 5:\r\n                                    n_type = is_data_qubit ? this.constants.NTYPE.NONE_WITH_DATA_QUBIT : this.constants.NTYPE.MEASUREMENT\r\n                                    break\r\n                            }\r\n                            let qubit = {\r\n                                t, i, j,\r\n                                connection,\r\n                                n_type,\r\n                                q_type,\r\n                                error: this.constants.ETYPE.I,  // an error happening from now to next\r\n                                propagated: this.constants.ETYPE.I,  // propagted error till now\r\n                            }\r\n                            if (this.errorModel == \"depolarizing\") {\r\n                                qubit.error_rate_x = 2 * this.depolarErrorRate  // X error rate\r\n                                qubit.error_rate_z = 2 * this.depolarErrorRate  // Z error rate\r\n                                qubit.error_rate_y = 2 * this.depolarErrorRate  // Y error rate\r\n                            }\r\n                            snapshot_row_1.push(qubit)\r\n                        } else {\r\n                            snapshot_row_1.push(null)\r\n                        }\r\n                    }\r\n                    snapshot_row_0.push(snapshot_row_1)\r\n                }\r\n                snapshot.push(snapshot_row_0)\r\n            }\r\n            return snapshot\r\n        },\r\n        build_standard_planar_code_snapshot() {\r\n            let snapshot = this.build_code_in_standard_planar_code()\r\n            // add boundary information (only add possible boundaries. exact boundary will be added `p` after building the graph)\r\n            for (let t=6; t < snapshot.length; t+=6) {\r\n                for (let i=0; i < snapshot[t].length; ++i) {\r\n                    for (let j=0; j < snapshot[t][i].length; ++j) {\r\n                        let node = snapshot[t][i][j]\r\n                        if (!node) continue\r\n                        if (node.n_type == this.constants.NTYPE.MEASUREMENT) {\r\n                            let bt = t\r\n                            let bi = i\r\n                            let bj = j\r\n                            if (t == snapshot.length - 1) bt += 6\r\n                            else {\r\n                                if (i == 1) bi -= 2\r\n                                if (i == snapshot[t].length - 2) bi += 2\r\n                                if (j == 1) bj -= 2\r\n                                if (j == snapshot[t][i].length - 2) bj += 2\r\n                            }\r\n                            if (bi != i || bj != j || bt != t) {\r\n                                node.boundary = {\r\n                                    t: bt,\r\n                                    i: bi,\r\n                                    j: bj,\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return snapshot\r\n        },\r\n        build_rotated_planar_code() {\r\n            if (this.L % 2 != 1) {\r\n                console.assert(false, \"L must be odd, add 1 to be odd\")\r\n                this.L += 1;\r\n            }\r\n            const middle = this.L - 1\r\n            const constants = this.constants\r\n            function filter(i, j) {\r\n                const distance = Math.abs(i - middle) + Math.abs(j - middle)\r\n                if (distance <= middle) return true\r\n                if ((i+j)%2 == 0) return false  // data qubit\r\n                const q_type = i % 2 == 0 ? constants.QTYPE.Z : constants.QTYPE.X\r\n                if (q_type == constants.QTYPE.Z && (i-middle)*(j-middle) > 0) return distance <= middle + 1\r\n                if (q_type == constants.QTYPE.X && (i-middle)*(j-middle) < 0) return distance <= middle + 1\r\n                return false\r\n            }\r\n            let snapshot = this.build_code_in_standard_planar_code(filter)\r\n            // add boundary information (only add possible boundaries. exact boundary will be added `p` after building the graph)\r\n            for (let t=6; t < snapshot.length; t+=6) {\r\n                for (let i=0; i < snapshot[t].length; ++i) {\r\n                    for (let j=0; j < snapshot[t][i].length; ++j) {\r\n                        let node = snapshot[t][i][j]\r\n                        if (!node) continue\r\n                        if (node.n_type == this.constants.NTYPE.MEASUREMENT) {\r\n                            let bt = t\r\n                            let bi = i\r\n                            let bj = j\r\n                            const distance = Math.abs(i - middle) + Math.abs(j - middle)\r\n                            if (t == snapshot.length - 1) bt += 6\r\n                            else if (distance >= middle - 3) {\r\n                                const q_type = i % 2 == 0 ? this.constants.QTYPE.Z : this.constants.QTYPE.X\r\n                                if (q_type == this.constants.QTYPE.Z) {\r\n                                    if (i > j) {\r\n                                        bi += 2\r\n                                        bj -= 2\r\n                                    } else {\r\n                                        bi -= 2\r\n                                        bj += 2\r\n                                    }\r\n                                } else {\r\n                                    if (i + j > 2 * middle) {\r\n                                        bi += 2\r\n                                        bj += 2\r\n                                    } else {\r\n                                        bi -= 2\r\n                                        bj -= 2\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (bi != i || bj != j || bt != t) {\r\n                                node.boundary = {\r\n                                    t: bt,\r\n                                    i: bi,\r\n                                    j: bj,\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return snapshot\r\n        },\r\n        error_multiply(err1, err2) {  // return err1.err2\r\n            if (err1 == this.constants.ETYPE.I) return err2\r\n            if (err2 == this.constants.ETYPE.I) return err1\r\n            if (err1 == this.constants.ETYPE.X && err2 == this.constants.ETYPE.X) return this.constants.ETYPE.I\r\n            if (err1 == this.constants.ETYPE.X && err2 == this.constants.ETYPE.Z) return this.constants.ETYPE.Y\r\n            if (err1 == this.constants.ETYPE.X && err2 == this.constants.ETYPE.Y) return this.constants.ETYPE.Z\r\n            if (err1 == this.constants.ETYPE.Z && err2 == this.constants.ETYPE.X) return this.constants.ETYPE.Y\r\n            if (err1 == this.constants.ETYPE.Z && err2 == this.constants.ETYPE.Z) return this.constants.ETYPE.I\r\n            if (err1 == this.constants.ETYPE.Z && err2 == this.constants.ETYPE.Y) return this.constants.ETYPE.X\r\n            if (err1 == this.constants.ETYPE.Y && err2 == this.constants.ETYPE.X) return this.constants.ETYPE.Z\r\n            if (err1 == this.constants.ETYPE.Y && err2 == this.constants.ETYPE.Z) return this.constants.ETYPE.X\r\n            if (err1 == this.constants.ETYPE.Y && err2 == this.constants.ETYPE.Y) return this.constants.ETYPE.I\r\n        },\r\n        generate_random_error() {\r\n            let error_count = 0\r\n            this.iterate_snapshot(((node, t, i, j) => {\r\n                const random_number = Math.random()\r\n                if (random_number < node.error_rate_x) {\r\n                    node.error = this.constants.ETYPE.X\r\n                    error_count += 1\r\n                } else if (random_number < node.error_rate_x + node.error_rate_z) {\r\n                    node.error = this.constants.ETYPE.Z\r\n                    error_count += 1\r\n                } else if (random_number < node.error_rate_x + node.error_rate_z + node.error_rate_y) {\r\n                    node.error = this.constants.ETYPE.Y\r\n                    error_count += 1\r\n                } else {\r\n                    node.error = this.constants.ETYPE.I\r\n                }\r\n            }).bind(this))\r\n            return error_count\r\n        },\r\n        compute_propagated_error(update_view=true) {\r\n            // careful: t=0 will remain propagated error, others will be recomputed\r\n            for (let t=1; t < this.snapshot.length; ++t) {\r\n                for (let i=0; i < this.snapshot[t].length; ++i) {\r\n                    for (let j=0; j < this.snapshot[t][i].length; ++j) {\r\n                        if (!this.snapshot[t][i][j]) continue\r\n                        this.snapshot[t][i][j].propagated = this.constants.ETYPE.I\r\n                    }\r\n                }\r\n            }\r\n            for (let t=0; t < this.snapshot.length-1; ++t) {\r\n                for (let i=0; i < this.snapshot[t].length; ++i) {\r\n                    for (let j=0; j < this.snapshot[t][i].length; ++j) {\r\n                        const node = this.snapshot[t][i][j]\r\n                        if (!node) continue\r\n                        // error will definitely propagated to itself\r\n                        const direct_error = this.error_multiply(node.error, node.propagated)\r\n                        this.snapshot[t+1][i][j].propagated = this.error_multiply(direct_error, this.snapshot[t+1][i][j].propagated)\r\n                        if (node.n_type == this.constants.NTYPE.INITIALIZATION) {\r\n                            this.snapshot[t+1][i][j].propagated = this.constants.ETYPE.I  // no error after initialization\r\n                        }\r\n                        // but sometimes it also propagated to other qubits through CX gate\r\n                        if (node.n_type == this.constants.NTYPE.CONTROL) {\r\n                            if (node.propagated == this.constants.ETYPE.X || node.propagated == this.constants.ETYPE.Y) {\r\n                                const peer_node = this.snapshot[t+1][node.connection.i][node.connection.j]\r\n                                peer_node.propagated = this.error_multiply(this.constants.ETYPE.X, peer_node.propagated)\r\n                            }\r\n                        }\r\n                        if (node.n_type == this.constants.NTYPE.TARGET) {\r\n                            if (node.propagated == this.constants.ETYPE.Z || node.propagated == this.constants.ETYPE.Y) {\r\n                                const peer_node = this.snapshot[t+1][node.connection.i][node.connection.j]\r\n                                peer_node.propagated = this.error_multiply(this.constants.ETYPE.Z, peer_node.propagated)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (update_view) {\r\n                for (let t=1; t < this.snapshot.length; ++t) {  // t=1 necessary, do not update the lowest layer\r\n                    for (let i=0; i < this.snapshot[t].length; ++i) {\r\n                        for (let j=0; j < this.snapshot[t][i].length; ++j) {\r\n                            const node = this.snapshot[t][i][j]\r\n                            if (!node) continue\r\n                            if (node.n_type == this.constants.NTYPE.MEASUREMENT) {\r\n                                if (node.q_type == this.constants.QTYPE.Z) {\r\n                                    let this_result = node.propagated == this.constants.ETYPE.I || node.propagated == this.constants.ETYPE.Z\r\n                                    const last_node = this.snapshot[t-6][i][j]\r\n                                    let last_result = last_node.propagated == this.constants.ETYPE.I || last_node.propagated == this.constants.ETYPE.Z\r\n                                    if (this_result != last_result) {\r\n                                        node.mesh.material.color = this.three.measurement_node_color_error\r\n                                    } else node.mesh.material.color = this.three.initialization_node_color_Z\r\n                                } else {\r\n                                    let this_result = node.propagated == this.constants.ETYPE.I || node.propagated == this.constants.ETYPE.X\r\n                                    const last_node = this.snapshot[t-6][i][j]\r\n                                    let last_result = last_node.propagated == this.constants.ETYPE.I || last_node.propagated == this.constants.ETYPE.X\r\n                                    if (this_result != last_result) {\r\n                                        node.mesh.material.color = this.three.measurement_node_color_error\r\n                                    } else node.mesh.material.color = this.three.initialization_node_color_X\r\n                                }\r\n                            }\r\n                            if (t > 0) {\r\n                                const vertical = this.snapshot[t][i][j].vertical\r\n                                if (node.propagated == this.constants.ETYPE.I) vertical.material.color = this.three.vertical_line_color\r\n                                else vertical.material.color = this.three.measurement_node_color_error\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        position_middle_set_bias() {\r\n            const [x, y, z] = this.position(0,0,0)\r\n            let mins = [x, y, z]\r\n            let maxs = [x, y, z]\r\n            let search = [[this.snapshot.length-1,0,0], [0,this.snapshot[0].length-1,0], [0,0,this.snapshot[0][0].length-1]]\r\n            for (let val of search) {\r\n                let pos = this.position(val[0], val[1], val[2])\r\n                for (let i=0; i<3; ++i) {\r\n                    if (pos[i] < mins[i]) mins[i] = pos[i]\r\n                    if (pos[i] > maxs[i]) maxs[i] = pos[i]\r\n                }\r\n            }\r\n            this.internals.bias.x = -0.5 * (maxs[0] - mins[0])\r\n            this.internals.bias.y = -0.5 * (maxs[1] - mins[1])\r\n            this.internals.bias.z = -0.5 * (maxs[2] - mins[2])\r\n        },\r\n        no_bias_position(t, i, j) {  // requires = 0 when t=i=j=0\r\n            return [j, t * this.constants.VERTICAL_INTERVAL, i]\r\n        },\r\n        position(t, i, j) {\r\n            let [x, y, z] = this.no_bias_position(t, i, j)\r\n            return [x + this.internals.bias.x, y + this.internals.bias.y, z + this.internals.bias.z]\r\n        },\r\n        create_static_resources() {\r\n            this.three.default_sphere = new THREE.SphereBufferGeometry( 0.2, 48, 24 )\r\n            this.three.initialization_node_geometry = new THREE.ConeBufferGeometry( 0.1, 0.15, 32 )\r\n            this.three.initialization_node_color_Z = new THREE.Color( 0, 0.75, 1 )\r\n            this.three.initialization_node_color_X = new THREE.Color( 0, 0.8, 0 )\r\n            const qubit_radius = 0.15\r\n            this.three.measurement_node_geometry = new THREE.SphereBufferGeometry( qubit_radius, 48, 24 )\r\n            this.three.measurement_node_color_Z = new THREE.Color( 0, 0.75, 1 )\r\n            this.three.measurement_node_color_X = new THREE.Color( 0, 0.8, 0 )\r\n            this.three.measurement_node_color_error = new THREE.Color( 'red' )\r\n            this.three.data_node_geometry = new THREE.SphereBufferGeometry( qubit_radius, 48, 24 )\r\n            this.three.data_node_color = new THREE.Color( 1, 0.65, 0 )\r\n            const vertical_radius = 0.02\r\n            this.three.vertical_line_geometry = new THREE.CylinderBufferGeometry( vertical_radius, vertical_radius, this.constants.VERTICAL_INTERVAL, 6 )\r\n            this.three.vertical_line_geometry.translate(0, - 0.5 * this.constants.VERTICAL_INTERVAL, 0)\r\n            this.three.vertical_line_color = new THREE.Color( 'black' )\r\n            const control_radius = 0.15\r\n            const control_tube = 0.005\r\n            this.three.CX_target_geometries = [\r\n                new THREE.TorusBufferGeometry( control_radius, control_tube, 16, 32 ),\r\n                new THREE.CylinderBufferGeometry( control_tube, control_tube, 2 * control_radius, 6 ),\r\n                new THREE.CylinderBufferGeometry( control_tube, control_tube, 2 * control_radius, 6 ),\r\n            ]\r\n            this.three.CX_target_geometries[0].rotateX(Math.PI / 2)\r\n            this.three.CX_target_geometries[1].rotateX(Math.PI / 2)\r\n            this.three.CX_target_geometries[2].rotateZ(Math.PI / 2)\r\n            this.three.CX_target_color = new THREE.Color( 'black' )\r\n            this.three.CX_link_geometry = new THREE.CylinderBufferGeometry( control_tube, control_tube, 1, 6 )\r\n            this.three.CX_link_geometry.translate(0, 0.5, 0)\r\n            this.three.CX_link_color = new THREE.Color( 'black' )\r\n            this.three.CX_control_geometry = new THREE.SphereBufferGeometry( 0.03, 12, 6 )\r\n            this.three.CX_control_color = new THREE.Color( 'black' )\r\n            const edge_default_radius = 0.05\r\n            this.three.edge_geometry = new THREE.CylinderBufferGeometry( edge_default_radius, edge_default_radius, 1, 6 ),\r\n            this.three.edge_geometry.translate(0, 0.5, 0)\r\n            this.three.edge_color = new THREE.Color( 'black' )\r\n        },\r\n        establish_snapshot() {\r\n            // position all object in the middle\r\n            this.position_middle_set_bias()\r\n            // add objects\r\n            for (let t=0; t < this.snapshot.length; ++t) {\r\n                for (let i=0; i < this.snapshot[t].length; ++i) {\r\n                    for (let j=0; j < this.snapshot[t][i].length; ++j) {\r\n                        let node = this.snapshot[t][i][j]\r\n                        if (node != null) {\r\n                            const [x, y, z] = this.position(t, i, j)\r\n                            if (node.n_type == this.constants.NTYPE.INITIALIZATION) {\r\n                                const color = node.q_type == this.constants.QTYPE.Z ? this.three.initialization_node_color_Z : this.three.initialization_node_color_X\r\n                                node.mesh = new THREE.Mesh(this.three.initialization_node_geometry, new THREE.MeshBasicMaterial({\r\n                                    color,\r\n                                }))\r\n                                node.mesh.visible = this.show_initialization\r\n                                node.mesh.position.set(x, y, z)\r\n                                this.three.scene.add(node.mesh)\r\n                            }\r\n                            if (node.n_type == this.constants.NTYPE.MEASUREMENT) {\r\n                                const color = node.q_type == this.constants.QTYPE.Z ? this.three.measurement_node_color_Z : this.three.measurement_node_color_X\r\n                                node.mesh = new THREE.Mesh(this.three.measurement_node_geometry, new THREE.MeshBasicMaterial({\r\n                                    color,\r\n                                    envMap: this.three.texture_background,\r\n                                    reflectivity: 0.5,\r\n                                }))\r\n                                node.mesh.visible = node.q_type == this.constants.QTYPE.Z ? this.show_Z_ancilla : this.show_X_ancilla\r\n                                node.mesh.position.set(x, y, z)\r\n                                this.three.scene.add(node.mesh)\r\n                            }\r\n                            if (node.n_type == this.constants.NTYPE.NONE_WITH_DATA_QUBIT) {\r\n                                node.mesh = new THREE.Mesh(this.three.data_node_geometry, new THREE.MeshBasicMaterial({\r\n                                    color: this.three.data_node_color,\r\n                                    envMap: this.three.texture_background,\r\n                                    reflectivity: 0.5,\r\n                                }))\r\n                                node.mesh.visible = this.show_data_qubit\r\n                                node.mesh.position.set(x, y, z)\r\n                                this.three.scene.add(node.mesh)\r\n                            }\r\n                            if (node.n_type == this.constants.NTYPE.TARGET) {\r\n                                node.mesh = []\r\n                                for (let k=0; k < this.three.CX_target_geometries.length; ++k) {\r\n                                    const geometry = this.three.CX_target_geometries[k]\r\n                                    let mesh = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({\r\n                                        color: this.three.CX_target_color,\r\n                                    }))\r\n                                    node.mesh.push(mesh)\r\n                                    mesh.visible = this.show_CX_gates\r\n                                    mesh.position.set(x, y, z)\r\n                                    this.three.scene.add(mesh)\r\n                                }\r\n                                // also add CX link here\r\n                                let mesh = new THREE.Mesh(this.three.CX_link_geometry, new THREE.MeshBasicMaterial({\r\n                                    color: this.three.CX_link_color,\r\n                                }))\r\n                                if (node.connection.i == i+1) {\r\n                                    mesh.rotateX(Math.PI / 2)\r\n                                }\r\n                                if (node.connection.i == i-1) {\r\n                                    mesh.rotateX(-Math.PI / 2)\r\n                                }\r\n                                if (node.connection.j == j+1) {\r\n                                    mesh.rotateZ(-Math.PI / 2)\r\n                                }\r\n                                if (node.connection.j == j-1) {\r\n                                    mesh.rotateZ(Math.PI / 2)\r\n                                }\r\n                                mesh.visible = this.show_CX_gates\r\n                                node.mesh.push(mesh)\r\n                                mesh.position.set(x, y, z)\r\n                                this.three.scene.add(mesh)\r\n                            }\r\n                            if (node.n_type == this.constants.NTYPE.CONTROL) {\r\n                                node.mesh = new THREE.Mesh(this.three.CX_control_geometry, new THREE.MeshBasicMaterial({\r\n                                    color: this.three.CX_control_color,\r\n                                }))\r\n                                node.mesh.visible = this.show_CX_gates\r\n                                node.mesh.position.set(x, y, z)\r\n                                this.three.scene.add(node.mesh)\r\n                            }\r\n                            // draw vertical line\r\n                            if (t > 0) {\r\n                                node.vertical = new THREE.Mesh(this.three.vertical_line_geometry, new THREE.MeshBasicMaterial({\r\n                                    color: this.three.vertical_line_color,\r\n                                }))\r\n                                node.vertical.visible = this.show_vertical_line\r\n                                node.vertical.position.set(x, y, z)\r\n                                this.three.scene.add(node.vertical)\r\n                            }\r\n                            // draw edges (automatically built graph)\r\n                            const generate_half_edge_mesh = function(t, i, j, pt, pi, pj, p) {\r\n                                const mesh = new THREE.Mesh(this.three.edge_geometry, new THREE.MeshBasicMaterial({\r\n                                    color: this.three.edge_color,\r\n                                }))\r\n                                const [x, y, z] = this.position(t, i, j)\r\n                                mesh.position.set(x, y, z)\r\n                                const [dx, dy, dz] = this.no_bias_position(t - pt, i - pi, j - pj)\r\n                                const distance = Math.sqrt(dx*dx + dy*dy + dz*dz)\r\n                                let weight = 1\r\n                                // weight = Math.log(p) / Math.log(2 * this.depolarErrorRate)\r\n                                // weight = weight * weight * weight * 2  // to amplify the difference\r\n                                // console.log(weight)\r\n                                mesh.scale.set(weight, distance / 2, weight)  // only plot half of the distance\r\n                                // rotate\r\n                                let axis = new THREE.Vector3( 1, 0, 0 )\r\n                                let angle = 0\r\n                                if (pi == i && pj == j) {\r\n                                    if (pt < t) angle = Math.PI\r\n                                } else {\r\n                                    const normalize = 1 / Math.sqrt(dz*dz + dx*dx)\r\n                                    axis = new THREE.Vector3( dz * normalize, 0, -dx * normalize )\r\n                                    angle = -Math.atan2(Math.sqrt(dx*dx + dz*dz), dy)\r\n                                    if (angle < 0) angle = Math.PI - angle\r\n                                }\r\n                                mesh.rotateOnAxis(axis, angle)\r\n                                return mesh\r\n                            }.bind(this)\r\n                            if (node.edges) {\r\n                                for (let edge of node.edges) {\r\n                                    edge.mesh = generate_half_edge_mesh(t, i, j, edge.t, edge.i, edge.j, edge.p)\r\n                                    if (node.q_type == this.constants.QTYPE.X && !this.show_X_edges) edge.mesh.visible = false\r\n                                    if (node.q_type == this.constants.QTYPE.Z && !this.show_Z_edges) edge.mesh.visible = false\r\n                                    this.three.scene.add(edge.mesh)\r\n                                }\r\n                            }\r\n                            if (node.boundary && node.boundary.p != undefined) {\r\n                                node.boundary.mesh = generate_half_edge_mesh(t, i, j, node.boundary.t, node.boundary.i, node.boundary.j, node.boundary.p)\r\n                                if (node.q_type == this.constants.QTYPE.X && !this.show_X_edges) node.boundary.mesh.visible = false\r\n                                if (node.q_type == this.constants.QTYPE.Z && !this.show_Z_edges) node.boundary.mesh.visible = false\r\n                                this.three.scene.add(node.boundary.mesh)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        build_graph_given_error_rate() {  // requirement: node.error_rate_x and node.error_rate_x and node.error_rate_y exists\r\n            function node_add_connection(node1, node2, p, _iterate=true) {  // DO NOT set _iterate\r\n                if (node1.edges == undefined) node1.edges = []\r\n                // first find node2 in its edges\r\n                let found = false\r\n                for (let i=0; i<node1.edges.length; ++i) {\r\n                    let edge = node1.edges[i]\r\n                    if (edge.t == node2.t && edge.i == node2.i && edge.j == node2.j) {\r\n                        found = true\r\n                        edge.p = edge.p * (1 - p) + p * (1 - edge.p)  // XOR\r\n                        break\r\n                    }\r\n                }\r\n                // create node2 edge if not found\r\n                if (found == false) {\r\n                    node1.edges.push({ t:node2.t, i:node2.i, j:node2.j, p })\r\n                }\r\n                if (_iterate) node_add_connection(node2, node1, p, false)  // add node1 to node2 connection\r\n            }\r\n            for (let t=0; t < this.snapshot.length-1; ++t) {\r\n                for (let i=0; i < this.snapshot[t].length; ++i) {\r\n                    for (let j=0; j < this.snapshot[t][i].length; ++j) {\r\n                        for (let e=0; e < 2; ++e) {\r\n                            if (!this.snapshot[t][i][j]) continue\r\n                            this.clear_errors()\r\n                            this.snapshot[t][i][j].error = e == 0 ? this.constants.ETYPE.X : this.constants.ETYPE.Z\r\n                            const p = (e == 0 ? this.snapshot[t][i][j].error_rate_x : this.snapshot[t][i][j].error_rate_z) + this.snapshot[t][i][j].error_rate_y\r\n                            this.compute_propagated_error(false)\r\n                            const error_syndrome = this.get_error_syndrome_propagated()\r\n                            if (error_syndrome.length == 1) {  // connect to boundary\r\n                                const [et, ei, ej] = error_syndrome[0]\r\n                                const boundary = this.snapshot[et][ei][ej].boundary\r\n                                console.assert(boundary, `there must be boundary on [${et}][${ei}][${ej}]`)\r\n                                if (boundary.p == undefined) boundary.p = 0\r\n                                boundary.p = boundary.p * (1 - p) + p * (1 - boundary.p)\r\n                            } else if (error_syndrome.length == 2) {  // connect to other nodes\r\n                                const node1 = this.snapshot[error_syndrome[0][0]][error_syndrome[0][1]][error_syndrome[0][2]]\r\n                                const node2 = this.snapshot[error_syndrome[1][0]][error_syndrome[1][1]][error_syndrome[1][2]]\r\n                                node_add_connection(node1, node2, p)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.clear_errors()\r\n        },\r\n        clear_errors() {\r\n            for (let t=0; t < this.snapshot.length; ++t) {\r\n                for (let i=0; i < this.snapshot[t].length; ++i) {\r\n                    for (let j=0; j < this.snapshot[t][i].length; ++j) {\r\n                        let node = this.snapshot[t][i][j]\r\n                        if (!node) continue\r\n                        node.error = this.constants.ETYPE.I\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        get_error_syndrome_propagated() {\r\n            let error_syndrome_propagated = []\r\n            for (let t=6; t < this.snapshot.length; t += 6) {\r\n                for (let i=0; i < this.snapshot[t].length; ++i) {\r\n                    for (let j=0; j < this.snapshot[t][i].length; ++j) {\r\n                        let node = this.snapshot[t][i][j]\r\n                        if (!node) continue\r\n                        if (node.n_type == this.constants.NTYPE.MEASUREMENT) {\r\n                            if (node.q_type == this.constants.QTYPE.Z) {\r\n                                let this_result = node.propagated == this.constants.ETYPE.I || node.propagated == this.constants.ETYPE.Z\r\n                                const last_node = this.snapshot[t-6][i][j]\r\n                                let last_result = last_node.propagated == this.constants.ETYPE.I || last_node.propagated == this.constants.ETYPE.Z\r\n                                if (this_result != last_result) {\r\n                                    error_syndrome_propagated.push([t,i,j])\r\n                                }\r\n                            } else {\r\n                                let this_result = node.propagated == this.constants.ETYPE.I || node.propagated == this.constants.ETYPE.X\r\n                                const last_node = this.snapshot[t-6][i][j]\r\n                                let last_result = last_node.propagated == this.constants.ETYPE.I || last_node.propagated == this.constants.ETYPE.X\r\n                                if (this_result != last_result) {\r\n                                    error_syndrome_propagated.push([t,i,j])\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return error_syndrome_propagated\r\n        },\r\n        count_error_syndrome_propagated() {\r\n            return this.get_error_syndrome_propagated().length\r\n        },\r\n        async verify_idea_all_single_error_only_has_at_most_two_syndrome() {\r\n            for (let t=0; t < this.snapshot.length-1; ++t) {\r\n                for (let i=0; i < this.snapshot[t].length; ++i) {\r\n                    for (let j=0; j < this.snapshot[t][i].length; ++j) {\r\n                        for (let e=0; e < 2; ++e) {\r\n                            if (!this.snapshot[t][i][j]) continue\r\n                            this.clear_errors()\r\n                            this.snapshot[t][i][j].error = e == 0 ? this.constants.ETYPE.X : this.constants.ETYPE.Z\r\n                            this.compute_propagated_error()\r\n                            // await this.sleep_ms(100)  // for visualization purpose\r\n                            const count_error_syndrome = this.count_error_syndrome_propagated()\r\n                            if (count_error_syndrome > 2) {\r\n                                console.log(\"find error syndrome count = \" + count_error_syndrome)\r\n                                console.log(`error at [${t}][${i}][${j}]`)\r\n                                return\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.clear_errors()\r\n            this.compute_propagated_error()\r\n            console.log(\"verified: all single error only has at most two syndrome\")\r\n        },\r\n        async verify_idea_at_most_12_neighbour_in_graph() {\r\n            this.iterate_snapshot((node, t, i, j) => {\r\n                if (node.edges) {\r\n                    console.assert(node.edges.length <= 12, `find [${t}][${i}][${j}] has ${node.edges.length} edges, greater than 12`)\r\n                }\r\n            })\r\n            console.log(\"verified: at most 12 neighbour in graph\")\r\n        },\r\n        iterate_snapshot(func) {\r\n            for (let t=0; t < this.snapshot.length; ++t) {\r\n                for (let i=0; i < this.snapshot[t].length; ++i) {\r\n                    for (let j=0; j < this.snapshot[t][i].length; ++j) {\r\n                        if (!this.snapshot[t][i][j]) continue\r\n                        func(this.snapshot[t][i][j], t, i, j)\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        get_snapshot_node(t, i, j) {\r\n            if (t >= 0 && t < this.snapshot.length) {\r\n                if (i >= 0 && i < this.snapshot[t].length) {\r\n                    if (j >= 0 && j < this.snapshot[t][i].length) {\r\n                        return this.snapshot[t][i][j]\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        regenerate_everything() {\r\n            if (this.useRotated) {\r\n                this.swap_snapshot(this.build_rotated_planar_code())\r\n            } else this.swap_snapshot(this.build_standard_planar_code_snapshot())\r\n            this.update_camera()\r\n        },\r\n        update_camera() {\r\n            const initCameraRatio = this.L * 0.8\r\n            this.three.orthogonalCamera.position.set( -6 * initCameraRatio, 3 * initCameraRatio, 3 * initCameraRatio )  // otherwise orthogonal camera cannot be rotated\r\n            this.three.orthogonalCamera.lookAt( this.three.scene.position )\r\n            this.three.orthogonalCamera.updateMatrix()\r\n            this.three.perspectiveCamera.position.set( -2 * initCameraRatio, 1 * initCameraRatio, 1 * initCameraRatio )\r\n            this.three.perspectiveCamera.lookAt( this.three.scene.position )\r\n            this.three.perspectiveCamera.updateMatrix()\r\n        },\r\n\t},\r\n\twatch: {\r\n        L() {\r\n            this.regenerate_everything()\r\n        },\r\n        T() {\r\n            this.regenerate_everything()\r\n        },\r\n        useRotated() {\r\n            this.regenerate_everything()\r\n        },\r\n        usePerspectiveCamera() {\r\n            this.use_orthogonal_camera(!this.usePerspectiveCamera)\r\n        },\r\n        show_data_qubit(show) {\r\n            this.iterate_snapshot((node, t, i, j) => {\r\n                if (node.n_type == this.constants.NTYPE.NONE_WITH_DATA_QUBIT) {\r\n                    node.mesh.visible = show\r\n                }\r\n            })\r\n        },\r\n        show_X_ancilla(show) {\r\n            this.iterate_snapshot((node, t, i, j) => {\r\n                if (node.n_type == this.constants.NTYPE.MEASUREMENT && node.q_type == this.constants.QTYPE.X) {\r\n                    node.mesh.visible = show\r\n                }\r\n            })\r\n        },\r\n        show_Z_ancilla(show) {\r\n            this.iterate_snapshot((node, t, i, j) => {\r\n                if (node.n_type == this.constants.NTYPE.MEASUREMENT && node.q_type == this.constants.QTYPE.Z) {\r\n                    node.mesh.visible = show\r\n                }\r\n            })\r\n        },\r\n        show_vertical_line(show) {\r\n            this.iterate_snapshot((node, t, i, j) => {\r\n                if (node.vertical) node.vertical.visible = show\r\n            })\r\n        },\r\n        show_initialization(show) {\r\n            this.iterate_snapshot((node, t, i, j) => {\r\n                if (node.n_type == this.constants.NTYPE.INITIALIZATION) node.mesh.visible = show\r\n            })\r\n        },\r\n        show_CX_gates(show) {\r\n            this.iterate_snapshot((node, t, i, j) => {\r\n                if (node.n_type == this.constants.NTYPE.TARGET) {\r\n                    for (let mesh of node.mesh) mesh.visible = show\r\n                }\r\n                if (node.n_type == this.constants.NTYPE.CONTROL) node.mesh.visible = show\r\n            })\r\n        },\r\n        show_X_edges(show) {\r\n            this.iterate_snapshot((node, t, i, j) => {\r\n                if (node.q_type == this.constants.QTYPE.X) {\r\n                    if (node.edges) for (let edge of node.edges) edge.mesh.visible = show\r\n                    if (node.boundary && node.boundary.mesh) node.boundary.mesh.visible = show\r\n                }\r\n            })\r\n        },\r\n        show_Z_edges(show) {\r\n            this.iterate_snapshot((node, t, i, j) => {\r\n                if (node.q_type == this.constants.QTYPE.Z) {\r\n                    if (node.edges) for (let edge of node.edges) edge.mesh.visible = show\r\n                    if (node.boundary && node.boundary.mesh) node.boundary.mesh.visible = show\r\n                }\r\n            })\r\n        },\r\n        showDataQubit(show) {\r\n            this.show_data_qubit = show\r\n        },\r\n        showXAncilla(show) {\r\n            this.show_X_ancilla = show\r\n        },\r\n        showZAncilla(show) {\r\n            this.show_Z_ancilla = show\r\n        },\r\n        showVerticalLine(show) {\r\n            this.show_vertical_line = show\r\n        },\r\n        showInitialization(show) {\r\n            this.show_initialization = show\r\n        },\r\n        showCXGates(show) {\r\n            this.show_CX_gates = show\r\n        },\r\n        showXEdges(show) {\r\n            this.show_X_edges = show\r\n        },\r\n        showZEdges(show) {\r\n            this.show_Z_edges = show\r\n        },\r\n\t},\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.main {\r\n\tbackground: red;\r\n}\r\n\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./FaultTolerantView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./FaultTolerantView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./FaultTolerantView.vue?vue&type=template&id=c6e9dd98&scoped=true&\"\nimport script from \"./FaultTolerantView.vue?vue&type=script&lang=js&\"\nexport * from \"./FaultTolerantView.vue?vue&type=script&lang=js&\"\nimport style0 from \"./FaultTolerantView.vue?vue&type=style&index=0&id=c6e9dd98&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"c6e9dd98\",\n  null\n  \n)\n\nexport default component.exports","<template>\n\t<div id=\"app\">\n\t\t<FaultTolerantView class=\"main-qubits\" :panelWidth=\"480\" :L=\"L\" :T=\"T\" :showDataQubit=\"show_data_qubit\" :showXAncilla=\"show_X_ancilla\"\n\t\t\t:showZAncilla=\"show_Z_ancilla\" :showVerticalLine=\"show_vertical_line\" :showInitialization=\"show_initialization\" :showCXGates=\"show_CX_gates\"\n\t\t\t:showXEdges=\"show_X_edges\" :showZEdges=\"show_Z_edges\" :useRotated=\"use_rotated\" :depolarErrorRate=\"0.001\" ref=\"ft_view\"\n\t\t\t:usePerspectiveCamera=\"use_perspective_camera\" :enableStats=\"enableStats\" :websiteRoot=\"websiteRoot\"></FaultTolerantView>\n\t\t<div class=\"control-panel no-scrollbar\">\n\t\t\t<div style=\"text-align: center;\">\n\t\t\t\t<h1 class=\"title\"><img src=\"@/assets/logo.png\" class=\"logo\"/>QEC Playground</h1>\n\t\t\t\t<p>This page is a visualization tool of fault-tolerant surface code. For tutorial and simpler case, visit <a href=\"https://wuyue98.cn/QECPlayground/\" target=\"_blank\">QECPlayground</a> instead.</p>\n\t\t\t</div>\n\t\t\t<el-card>\n\t\t\t\t<div slot=\"header\" class=\"clearfix\">\n\t\t\t\t\t<span>Display Settings</span>\n\t\t\t\t</div>\n\t\t\t\t<div style=\"position: relative\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\tCode Distance:\n\t\t\t\t\t\t<el-input-number v-model=\"bufferedL\" :min=\"3\"></el-input-number>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style=\"height: 20px;\"></div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\tMeasurement Round:\n\t\t\t\t\t\t<el-input-number v-model=\"T\" :min=\"1\"></el-input-number>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style=\"height: 20px;\"></div>\n\t\t\t\t\t<el-switch v-model=\"use_rotated\" active-text=\"Rotated Planar Code\" inactive-text=\"Standard Planar Code\"></el-switch>\n\t\t\t\t\t<div style=\"height: 20px;\"></div>\n\t\t\t\t\t<el-switch v-model=\"use_perspective_camera\" active-text=\"Perspective Camera\" inactive-text=\"Orthogonal Camera\"></el-switch>\n\t\t\t\t\t<div style=\"height: 20px;\"></div>\n\t\t\t\t\t<el-switch v-model=\"show_data_qubit\" active-text=\"Show Data Qubits\" inactive-text=\"Hide\"></el-switch>\n\t\t\t\t\t<div style=\"height: 20px;\"></div>\n\t\t\t\t\t<el-switch v-model=\"show_Z_ancilla\" active-text=\"Show Z Stabilizers\" inactive-text=\"Hide\"></el-switch>\n\t\t\t\t\t<div style=\"height: 20px;\"></div>\n\t\t\t\t\t<el-switch v-model=\"show_X_ancilla\" active-text=\"Show X Stabilizers\" inactive-text=\"Hide\"></el-switch>\n\t\t\t\t\t<div style=\"height: 20px;\"></div>\n\t\t\t\t\t<el-switch v-model=\"show_vertical_line\" active-text=\"Show Vertical Lines\" inactive-text=\"Hide\"></el-switch>\n\t\t\t\t\t<div style=\"height: 20px;\"></div>\n\t\t\t\t\t<el-switch v-model=\"show_initialization\" active-text=\"Show Initialization\" inactive-text=\"Hide\"></el-switch>\n\t\t\t\t\t<div style=\"height: 20px;\"></div>\n\t\t\t\t\t<el-switch v-model=\"show_CX_gates\" active-text=\"Show CX (CNOT) Gates\" inactive-text=\"Hide\"></el-switch>\n\t\t\t\t\t<div style=\"height: 20px;\"></div>\n\t\t\t\t\t<el-switch v-model=\"show_Z_edges\" active-text=\"Show Z Graph Lattice\" inactive-text=\"Hide\"></el-switch>\n\t\t\t\t\t<div style=\"height: 20px;\"></div>\n\t\t\t\t\t<el-switch v-model=\"show_X_edges\" active-text=\"Show X Graph Lattice\" inactive-text=\"Hide\"></el-switch>\n\t\t\t\t</div>\n\t\t\t</el-card>\n\t\t\t<div style=\"height: 10px;\"></div>\n\t\t\t<el-card>\n\t\t\t\t<div slot=\"header\" class=\"clearfix\">\n\t\t\t\t\t<span>Random Error Generator (I + p<sub>X</sub>X + p<sub>Z</sub>Z + p<sub>Y</sub>Y)</span>\n\t\t\t\t</div>\n\t\t\t\t<div style=\"position: relative\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div class=\"probability\">p<sub>X</sub></div>\n\t\t\t\t\t\t<el-input style=\"width: 90px;\" v-model=\"error_rate_x\" placeholder=\"0\"></el-input>\n\t\t\t\t\t\t<div class=\"probability\">p<sub>Z</sub></div>\n\t\t\t\t\t\t<el-input style=\"width: 90px;\" v-model=\"error_rate_z\" placeholder=\"0\"></el-input>\n\t\t\t\t\t\t<div class=\"probability\">p<sub>Y</sub></div>\n\t\t\t\t\t\t<el-input style=\"width: 90px;\" v-model=\"error_rate_y\" placeholder=\"0\"></el-input>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style=\"height: 20px;\"></div>\n\t\t\t\t\t<el-button type=\"success\" style=\"width: 100%\" @click=\"generate_random_error\">Generate i.i.d. Random Errors</el-button>\n\t\t\t\t</div>\n\t\t\t</el-card>\n\t\t\t<div style=\"height: 10px;\"></div>\n\t\t\t<el-card>\n\t\t\t\t<div slot=\"header\" class=\"clearfix\">\n\t\t\t\t\t<span>Customize Error</span>\n\t\t\t\t</div>\n\t\t\t\t<div style=\"position: relative\">\n\t\t\t\t\t<el-button type=\"warning\" style=\"width: 100%\" @click=\"clear_error\">Clear All Errors</el-button>\n\t\t\t\t\t<div style=\"height: 20px;\"></div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div v-for=\"(item, index) of error_info\" v-bind:key=\"index\" :style=\"{ color: item[4] }\">\n\t\t\t\t\t\t\t{{ `${item[3]} error at t=${item[0]}, i=${item[1]}, j=${item[2]}` }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style=\"height: 20px;\" v-if=\"error_info.length > 0\"></div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div class=\"index\">t</div>\n\t\t\t\t\t\t<el-input-number v-model=\"target_t\" controls-position=\"right\" :min=\"0\" :max=\"6 * T\" size=\"medium\"></el-input-number>\n\t\t\t\t\t\t<div class=\"index\">i</div>\n\t\t\t\t\t\t<el-input-number v-model=\"target_i\" controls-position=\"right\" :min=\"0\" :max=\"2 * L - 2\" size=\"medium\"></el-input-number>\n\t\t\t\t\t\t<div class=\"index\">j</div>\n\t\t\t\t\t\t<el-input-number v-model=\"target_j\" controls-position=\"right\" :min=\"0\" :max=\"2 * L - 2\" size=\"medium\"></el-input-number>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style=\"height: 20px;\"></div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<el-button type=\"info\" class=\"set-error-button\" @click=\"set_error(false, false)\" :plain=\"current_error != 0\">I</el-button>\n\t\t\t\t\t\t<el-button type=\"success\" class=\"set-error-button\" @click=\"set_error(true, false)\" :plain=\"current_error != 1\">X</el-button>\n\t\t\t\t\t\t<el-button type=\"primary\" class=\"set-error-button\" @click=\"set_error(false, true)\" :plain=\"current_error != 2\">Z</el-button>\n\t\t\t\t\t\t<el-button type=\"danger\" class=\"set-error-button\" @click=\"set_error(true, true)\" :plain=\"current_error != 3\">Y</el-button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</el-card>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport FaultTolerantView from './components/FaultTolerantView'\nlet deploy_mode = process.env.NODE_ENV != \"development\"\n\nexport default {\n\tname: 'app',\n\tcomponents: {\n\t\tFaultTolerantView,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tdeploy_mode: deploy_mode,\n\n\t\t\tL: 3,\n\t\t\tT: 3,\n\t\t\tuse_rotated: false,\n\n\t\t\tbufferedL: 1,  // to avoid invalid `L` pass into FaultTolerantView\n\t\t\tshow_data_qubit: true,\n            show_X_ancilla: true,\n            show_Z_ancilla: true,\n            show_vertical_line: true,\n            show_initialization: true,\n            show_CX_gates: true,\n            show_X_edges: false,\n\t\t\tshow_Z_edges: false,\n\t\t\tuse_perspective_camera: true,\n\t\t\t\n\t\t\ttarget_t: 0,\n\t\t\ttarget_i: 0,\n\t\t\ttarget_j: 0,\n\n\t\t\terror_rate_x: \"1e-3\",\n\t\t\terror_rate_z: \"1e-3\",\n\t\t\terror_rate_y: \"1e-3\",\n\n\t\t\tcurrent_error: null,\n\t\t\terror_info: [],  // [t, i, j, name, color]\n\t\t}\n\t},\n\tcomputed: {\n\t\tenableStats() {\n\t\t\treturn !deploy_mode\n\t\t},\n\t\tdecoderServerRootUrl() {\n\t\t\treturn deploy_mode ? \"/api/qecp/\" : \"http://127.0.0.1:8066/\"\n\t\t},\n\t\twebsiteRoot() {\n\t\t\treturn deploy_mode ? \"/FT-QECPlayground\" : \"\"  // like https://wuyue98.cn/FT-QECPlayground or https://yuewuo.github.io/FT-QECPlayground\n\t\t},\n\t},\n\tmounted() {\n\t\twindow.$app = this  // for fast debugging\n\t\tthis.bufferedL = this.L\n\t},\n\tmethods: {\n\t\tset_error(X, Z) {\n\t\t\tconst ft_view = this.$refs.ft_view\n\t\t\tconst node = ft_view.get_snapshot_node(this.target_t, this.target_i, this.target_j)\n\t\t\tif (node) {\n\t\t\t\tnode.error = X ? (Z ? ft_view.constants.ETYPE.Y : ft_view.constants.ETYPE.X) : (Z ? ft_view.constants.ETYPE.Z : ft_view.constants.ETYPE.I)\n\t\t\t\tft_view.compute_propagated_error()\n\t\t\t\tthis.update_error_information()\n\t\t\t} else {\n\t\t\t\tthis.$notify.error({\n\t\t\t\t\ttitle: 'Set Error Failed',\n\t\t\t\t\tmessage: `Node at [${this.target_t}][${this.target_i}][${this.target_j}] doesn't exist.`\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\tclear_error() {\n\t\t\tlet ft_view = this.$refs.ft_view\n\t\t\tft_view.iterate_snapshot((node, t, i, j) => {\n\t\t\t\tnode.error = ft_view.constants.ETYPE.I\n\t\t\t})\n\t\t\tft_view.compute_propagated_error()\n\t\t\tthis.update_error_information()\n\t\t},\n\t\tgenerate_random_error() {\n\t\t\tlet ft_view = this.$refs.ft_view\n\t\t\tconst [error_rate_x, error_rate_z, error_rate_y] = this.get_error_rates()\n\t\t\tft_view.iterate_snapshot((node, t, i, j) => {\n\t\t\t\tnode.error_rate_x = error_rate_x\n\t\t\t\tnode.error_rate_z = error_rate_z\n\t\t\t\tnode.error_rate_y = error_rate_y\n\t\t\t})\n\t\t\tft_view.generate_random_error()\n\t\t\tft_view.compute_propagated_error()\n\t\t\tthis.update_error_information()\n\t\t},\n\t\tget_error_rates() {\n\t\t\tfunction fixed_error_rate(that, name) {\n\t\t\t\tconst error_rate = parseFloat(that[name])\n\t\t\t\tif (!(error_rate <= 1 && error_rate >= 0)) {\n\t\t\t\t\tthat[name] = \"0\"\n\t\t\t\t\treturn 0\n\t\t\t\t}\n\t\t\t\treturn error_rate\n\t\t\t}\n\t\t\tconst error_rate_x = fixed_error_rate(this, \"error_rate_x\")\n\t\t\tconst error_rate_z = fixed_error_rate(this, \"error_rate_z\")\n\t\t\tconst error_rate_y = fixed_error_rate(this, \"error_rate_y\")\n\t\t\tif (error_rate_x + error_rate_z + error_rate_y > 1) {\n\t\t\t\tthis.$notify.error({\n\t\t\t\t\ttitle: 'Invalid Error Rate',\n\t\t\t\t\tmessage: `The sum of error rate probabilities should not exceed 1, now it's ${error_rate_x + error_rate_z + error_rate_y}.`\n\t\t\t\t})\n\t\t\t\treturn [0, 0, 0]\n\t\t\t}\n\t\t\treturn [error_rate_x, error_rate_z, error_rate_y]\n\t\t},\n\t\tupdate_error_information() {\n\t\t\tlet ft_view = this.$refs.ft_view\n\t\t\tlet error_info = []\n\t\t\tft_view.iterate_snapshot((node, t, i, j) => {\n\t\t\t\tif (node.error != ft_view.constants.ETYPE.I) {\n\t\t\t\t\tlet name = \"I\"\n\t\t\t\t\tlet color = \"black\"\n\t\t\t\t\tif (node.error == ft_view.constants.ETYPE.X) { name = \"X\"; color = \"#85ce61\" }\n\t\t\t\t\tif (node.error == ft_view.constants.ETYPE.Z) { name = \"Z\"; color = \"#409EFF\" }\n\t\t\t\t\tif (node.error == ft_view.constants.ETYPE.Y) { name = \"Y\"; color = \"#F56C6C\" }\n\t\t\t\t\terror_info.push([t, i, j, name, color])\n\t\t\t\t}\n\t\t\t})\n\t\t\tthis.error_info = error_info\n\t\t\tthis.target_t_i_j_updated()\n\t\t},\n\t\ttarget_t_i_j_updated() {\n\t\t\tconst ft_view = this.$refs.ft_view\n\t\t\tconst node = ft_view.get_snapshot_node(this.target_t, this.target_i, this.target_j)\n\t\t\tif (node) {\n\t\t\t\tthis.current_error = node.error\n\t\t\t} else this.current_error = null\n\t\t},\n\t},\n\twatch: {\n\t\ttarget_t() {\n\t\t\tthis.target_t_i_j_updated()\n\t\t},\n\t\ttarget_i() {\n\t\t\tthis.target_t_i_j_updated()\n\t\t},\n\t\ttarget_j() {\n\t\t\tthis.target_t_i_j_updated()\n\t\t},\n\t\tbufferedL(val, oldVal) {\n\t\t\tif (val <= 0) {\n\t\t\t\tthis.bufferedL = 1\n\t\t\t} else {\n\t\t\t\tif (this.use_rotated) {\n\t\t\t\t\t// make it odd\n\t\t\t\t\tif (val < oldVal) this.bufferedL = Math.floor((val - 1) / 2) * 2 + 1\n\t\t\t\t\telse this.bufferedL = Math.ceil((val - 1) / 2) * 2 + 1\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.L = this.bufferedL\n\t\t},\n\t\tuse_rotated(val) {\n\t\t\tif (val && this.bufferedL % 2 == 0) {\n\t\t\t\tthis.bufferedL = this.bufferedL + 1  // make it odd when switch to rotated planar code\n\t\t\t}\n\t\t\tthis.L = this.bufferedL\n\t\t},\n\t},\n}\n</script>\n\n<style>\n\n#app {\n\tfont-family: 'Avenir', Helvetica, Arial, sans-serif;\n\t-webkit-font-smoothing: antialiased;\n\t-moz-osx-font-smoothing: grayscale;\n\tcolor: #2c3e50;\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\tright: 0;\n\tbottom: 0;\n}\n\n.main-qubits {\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\tright: 480px;\n\tbottom: 0;\n}\n\n.control-panel {\n\tposition: fixed;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\twidth: 460px;\n\toverflow: auto;\n\tpadding: 10px;\n}\n\n.title {\n\tline-height: 48px;\n\tposition: relative;\n}\n\n.logo {\n\twidth: 48px;\n\theight: 48px;\n\tposition: relative;\n\ttop: 10px;\n\tright: 10px;\n}\n\n.toggle-error-button {\n\twidth: 300px;\n}\n\n.clear-error-button {\n\tposition: absolute;\n\tright: 0;\n\ttop: 0;\n\tbottom: 0;\n}\n\n.full-width {\n\twidth: 100%;\n}\n\n.big-button {\n\twidth: 100%;\n\theight: 100px;\n}\n\n/* .no-scrollbar::-webkit-scrollbar {\n\twidth: 10px;\n} */\n\n.el-input-number.is-controls-right .el-input__inner {\n\tpadding-left: 0 !important;\n\tpadding-right: 30px !important;\n\twidth: 100px;\n}\n\n.el-input-number.is-controls-right .el-input-number__decrease {\n\tleft: 62px !important;\n}\n\n.el-input-number.is-controls-right .el-input-number__increase {\n\tleft: 62px !important;\n}\n\n.el-input-number.el-input-number--medium.is-controls-right {\n\twidth: 110px !important;\n}\n\n.index {\n\tfont-size: 150%;\n\tfont-weight: bold;\n\tdisplay: inline;\n\tmargin-right: 10px;\n}\n\n.probability {\n\tfont-size: 120%;\n\tdisplay: inline;\n\tmargin-right: 10px;\n\tmargin-left: 10px;\n}\n\n.set-error-button {\n\twidth: 80px;\n\tmargin-right: 10px;\n}\n\n</style>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=6aa383d0&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport Element from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\nimport locale from 'element-ui/lib/locale/lang/en'\n\nVue.use(Element, { locale })\n","let isMathjaxConfig = false\r\n\r\nconst initMathjaxConfig = () => {\r\n    if (!window.MathJax) {\r\n        return\r\n    }\r\n    window.MathJax.Hub.Config({\r\n        showProcessingMessages: false,\r\n        messageStyle: \"none\",\r\n        jax: [\"input/TeX\", \"output/HTML-CSS\"],\r\n        tex2jax: {\r\n            inlineMath: [[\"$\", \"$\"], [\"\\\\(\", \"\\\\)\"]],\r\n            displayMath: [[\"$$\", \"$$\"], [\"\\\\[\", \"\\\\]\"]],\r\n            skipTags: [\"script\", \"noscript\", \"style\", \"textarea\", \"pre\", \"code\", \"a\"]\r\n        },\r\n        \"HTML-CSS\": {\r\n            availableFonts: [\"STIX\", \"TeX\"],\r\n            showMathMenu: false\r\n        }\r\n    })\r\n    isMathjaxConfig = true\r\n}\r\n\r\nconst MathQueue = function (elementId) {\r\n    if (!window.MathJax) {\r\n        return\r\n    }\r\n    if (!isMathjaxConfig) initMathjaxConfig()  // initialize first\r\n    window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub, document.getElementById(elementId)])\r\n}\r\n\r\nexport default {\r\n    isMathjaxConfig,\r\n    initMathjaxConfig,\r\n    MathQueue,\r\n}\r\n","import Vue from 'vue'\r\nimport App from './App.vue'\r\nimport './plugins/element.js'\r\nimport ElementUI from 'element-ui'\r\nimport 'element-ui/lib/theme-chalk/index.css'\r\nimport MathjaxConfig from './plugins/mathjax-config'\r\n\r\nVue.config.productionTip = false\r\nVue.use(ElementUI)\r\nVue.prototype.MathjaxConfig = MathjaxConfig\r\n\r\nnew Vue({\r\n  render: h => h(App),\r\n}).$mount('#app')\r\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./FaultTolerantView.vue?vue&type=style&index=0&id=c6e9dd98&scoped=true&lang=css&\"","module.exports = __webpack_public_path__ + \"img/logo.e39bfe01.png\";"],"sourceRoot":""}